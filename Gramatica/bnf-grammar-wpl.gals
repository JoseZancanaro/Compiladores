#Options
GenerateScanner = true
GenerateParser = true
Language = C++
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = wpl
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = SLR
#RegularDefinitions
// SYMBOLS
SYM_HEX     : [0-9a-fA-F]
SYM_DEC     : [0-9]
SYM_BIN     : [01]
SYM_LETTER  : [a-zA-Z]
SYM_CHAR    : [^']
SYM_STR     : [^\"]
SYM_DASH    : \-
SYM_SLASH   : /
SYM_VEC_MT  : \[\]
SYM_COMM_SL : {SYM_SLASH}{SYM_SLASH}[^\n]*
SYM_COMM_ML : {SYM_SLASH}{SYM_DASH}((\-[^/])|[^\-])*{SYM_DASH}+{SYM_SLASH}

// Identifiers
ID_NAME : [a-zA-Z_][a-zA-Z_0-9]*
ID_FUNC : [a-zA-Z_][a-zA-Z_0-9]*'*
#Tokens
// 1 Keywords

// 1.0 Types

// 1.0.0 Type names
KW_VOID   : "Void"
KW_INT    : "Integer"
KW_FLOAT  : "Float"
KW_DOUBLE : "Double"
KW_BOOL   : "Bool"
KW_CHAR   : "Char"
KW_STR    : "String"
KW_ANY    : "Any"

// 1.0.1 Type modifiers
KW_CONST  : "const"
KW_VECTOR : {SYM_VEC_MT}

// 1.1 Conditionals
KW_CASE   : "case"
KW_OF     : "of"

KW_SWITCH : "switch"
KW_BREAK  : "break" 

KW_CHOOSE : "choose from"

KW_IF     : "if"
KW_ELSE   : "else"

KW_PIPE       : "|>"
KW_OTHERWISE  : "otherwise"

// 1.2 Loops
KW_FOR       : "for"
KW_WHILE     : "while"
KW_DO        : "do"

// 1.3 Function

// 1.3.0 Function definition and return
KW_DEF    : "def"
KW_RETURN : "return"

// 1.3.1 Function reserved name
KW_FN_RESERVED : ((read)|(print))

// 2 Operators

// 2.0 Attribution
OP_ATT      : "="
OP_INC      : "++"
OP_DEC      : "--"
OP_ATT_ADD  : "+="
OP_ATT_SUB  : "-="
OP_ATT_MULT : "*="
OP_ATT_DIV  : "/="
OP_ATT_REM  : "%="

// 2.1 Arithmetic
OP_ADD  : "+"
OP_SUB  : "-"
OP_MULT : "*"
OP_DIV  : "/"
OP_REM  : "%"
OP_EXP  : "**"


// 2.2 Relational
OP_GT  : ">"
OP_LT  : "<"
OP_GTE : ">="
OP_LTE : "<="
OP_EQ  : "=="
OP_NEQ : "!="

// 2.3 Logical
OP_AND : "&&"
OP_OR  : "||"
OP_NOT : "!"

// 2.4 Bitwise
OP_BW_SR   : ">>"
OP_BW_SL   : "<<"
OP_BW_AND  : "&"
OP_BW_OR   : "|"
OP_BW_COMP : "~"
OP_BW_XOR  : "^"

// 3 Identifiers
ID_VAR : {ID_NAME}
ID_FUNC: {ID_FUNC}

// 4 Literal values
VAL_INT       : {SYM_DEC}+
VAL_INT_BIN   : 0b{SYM_BIN}+
VAL_INT_HEX   : 0x{SYM_HEX}+
VAL_REAL      : {SYM_DEC}+\.{SYM_DEC}+
VAL_CHAR      : ('{SYM_CHAR}')|('')
VAL_STR       : \"{SYM_STR}*\"
VAL_BOOL_TRUE  = ID_VAR : "true"
VAL_BOOL_FALSE = ID_VAR : "false"

// 5 Comments are ignored

// 6 Delimiters
DEL_ARROW  : "->"
DEL_PERIOD : "."
DEL_COMMA  : ","
DEL_COLON  : ":"
DEL_SEMICOLON : ";"

DEL_LP  : "("
DEL_RP  : ")"

DEL_LSB : "["
DEL_RSB : "]"

DEL_LCB : "{"
DEL_RCB : "}"

// Ignore chars
: ({SYM_COMM_SL}|{SYM_COMM_ML}|[\s\t\n\r])*
#NonTerminals
// WPL
// Context-free grammar states

<program>

<definition_list>
<definition>

<statement_list>

<statement>
<scope>

<initialization>

<declaration>
<declaration_name_list>
<declaration_name>

<type_complete>
<type>
<type_modifier>
<type_modifier_vector>
<type_modifier_const>
<type_modifier_pointer>

<literal>
<literal_primitive>

<vector_constructor>
<vector_constructor_values>
<vector_child>

<assignment_list>
<assignment>
<assignment_vector_sub>

<loop>
<loop_while>
<loop_do_while>
<loop_for>
<loop_for_args>
<loop_for_args_init>
<loop_for_args_test>
<loop_for_args_op>
<loop_range_for>
<loop_range_for_declaration>

<selection>
<selection_choose>
<selection_choose_opt_list>
<selection_choose_opt>
<selection_choose_otherwise>

<selection_case>
<selection_case_opt_list>
<selection_case_opt>
<selection_case_otherwise>

<selection_if>
<selection_if_else>

<selection_switch>
<selection_switch_case_list>
<selection_switch_case>
<selection_switch_otherwise>

<break>

<function>
<function_name>
<function_arg_list>
<function_arg>
<function_return>

<function_call>
<function_call_arg_list>
<function_call_arg>

<expression_list>
<expression>

<precedence_tree>

<precedence_l13>
<precedence_l12>
<precedence_l11>
<precedence_l10>
<precedence_l09>
<precedence_l08>
<precedence_l07>
<precedence_l06>
<precedence_l05>
<precedence_l04>
<precedence_l03>
<precedence_l02>
<precedence_l01>

<value>
#Grammar
// WPL
// Context-free grammar especification

<program> ::= <definition_list> ;

<definition_list> ::= <definition> <definition_list> | î ;
<definition> ::= <declaration> DEL_SEMICOLON | <function> ;

<statement_list> ::= <statement> <statement_list> | î ;

// Scope statement, selection statement, loop statement, expression statement, declaration statement, assignment statement, function return statement, break statement
<statement> ::= <scope> | <selection> | <loop> | <expression> DEL_SEMICOLON | <declaration> DEL_SEMICOLON | <function_return> DEL_SEMICOLON | <break> DEL_SEMICOLON ;
<scope> ::= DEL_LCB <statement_list> DEL_RCB ;

<initialization> ::= <declaration> | <assignment> ;

<declaration> ::= <type_complete> <declaration_name_list> ;
<declaration_name_list> ::= <declaration_name> DEL_COMMA <declaration_name_list> | <declaration_name> ;
<declaration_name> ::= ID_VAR OP_ATT <expression> | ID_VAR ;

// Typename [vector modifier, ...] [pointer] [const]
<type_complete> ::= <type> <type_modifier> ;
<type> ::= KW_VOID | KW_INT | KW_FLOAT | KW_DOUBLE | KW_BOOL | KW_CHAR | KW_STR | KW_ANY ;
<type_modifier> ::= <type_modifier_vector> <type_modifier_const> <type_modifier_pointer> ;
<type_modifier_vector> ::= KW_VECTOR <type_modifier_vector> | DEL_LSB <literal_primitive> DEL_RSB <type_modifier_vector> | î ;
<type_modifier_const> ::= KW_CONST | î ;
<type_modifier_pointer> ::= OP_MULT <type_modifier_pointer> | î ;

// Contant values, vector constructor
<literal> ::= <literal_primitive> | <vector_constructor> ;
<literal_primitive> ::= VAL_INT | VAL_INT_BIN | VAL_INT_HEX | VAL_REAL | VAL_CHAR | VAL_STR | VAL_BOOL_TRUE | VAL_BOOL_FALSE  ;

<vector_constructor> ::= DEL_LSB <vector_constructor_values> DEL_RSB | KW_VECTOR;
<vector_constructor_values> ::= <expression> DEL_COMMA <vector_constructor_values> | <expression> ;
<vector_child> ::= ID_VAR DEL_LSB <expression> DEL_RSB ;

<assignment_list> ::= <assignment> DEL_COMMA <assignment_list> | <assignment> ;
<assignment> ::= ID_VAR OP_ATT <expression> | <assignment_vector_sub> ;
<assignment_vector_sub> ::= ID_VAR DEL_LSB <expression> DEL_RSB OP_ATT <expression> ;

// Loops: while, do-while, for, range-for
<loop> ::= <loop_while> | <loop_do_while> | <loop_for> | <loop_range_for> ;

<loop_while> ::= KW_WHILE DEL_LP <expression> DEL_RP <statement> ;

<loop_do_while> ::= KW_DO <statement> KW_WHILE DEL_LP <expression> DEL_RP ;

<loop_for> ::= KW_FOR DEL_LP <loop_for_args> DEL_RP <statement> ;
<loop_for_args> ::= <loop_for_args_init> DEL_SEMICOLON <loop_for_args_test> DEL_SEMICOLON <loop_for_args_op> ;
<loop_for_args_init> ::= <initialization> | î ;
<loop_for_args_test> ::= <expression> | î ;
<loop_for_args_op> ::= <expression_list> | î ;

<loop_range_for> ::= KW_FOR DEL_LP <loop_range_for_declaration> DEL_COLON <expression> DEL_RP <statement> ;
<loop_range_for_declaration> ::= <type_complete> ID_VAR | ID_VAR ;

// Selection Branches: choose-from, case-of, if-then-else, switch-case
<selection> ::= <selection_choose> | <selection_if> | <selection_switch> ; // | <selection_case>

<selection_choose> ::= KW_CHOOSE DEL_LCB <selection_choose_opt_list> DEL_RCB ;
<selection_choose_opt_list> ::= <selection_choose_opt> <selection_choose_opt_list> | <selection_choose_opt> | <selection_choose_otherwise> ;
<selection_choose_opt> ::= KW_PIPE <expression> DEL_ARROW <statement> ;
<selection_choose_otherwise> ::= KW_PIPE KW_OTHERWISE DEL_ARROW <statement> ;

<selection_case> ::= KW_CASE ID_VAR KW_OF DEL_LCB <selection_case_opt_list> DEL_RCB ;
<selection_case_opt_list> ::= <selection_case_opt> <selection_case_opt_list> | <selection_case_opt> | <selection_case_otherwise> ;
<selection_case_opt> ::= KW_PIPE <literal> DEL_ARROW <statement> ;
<selection_case_otherwise> ::= KW_PIPE KW_OTHERWISE DEL_ARROW <statement> ;

<selection_if> ::= KW_IF DEL_LP <expression> DEL_RP <scope> | KW_IF DEL_LP <expression> DEL_RP <scope> <selection_if_else> ;
<selection_if_else> ::= KW_ELSE <statement> ; 

<selection_switch> ::= KW_SWITCH DEL_LP <expression> DEL_RP DEL_LCB <selection_switch_case_list> DEL_RCB ;
<selection_switch_case_list> ::= <selection_switch_case> <selection_switch_case_list> | <selection_switch_case> | <selection_switch_otherwise> ;
<selection_switch_case> ::= KW_CASE <expression> DEL_COLON <statement_list> ;
<selection_switch_otherwise> ::= KW_OTHERWISE DEL_COLON <statement_list> ;

<break> ::= KW_BREAK ;

// Subroutines: function definition
<function> ::= KW_DEF <function_name> DEL_LP <function_arg_list> DEL_RP DEL_ARROW <type_complete> <scope> ;
<function_name> ::= ID_VAR | ID_FUNC | KW_FN_RESERVED ;
<function_arg_list> ::= <function_arg> DEL_COMMA <function_arg_list> | <function_arg> | î ;
<function_arg> ::= <type_complete> ID_VAR ;
<function_return> ::= KW_RETURN <expression> ;

<function_call> ::= <function_name> DEL_LP <function_call_arg_list> DEL_RP | <function_name> DEL_LP DEL_RP ;
<function_call_arg_list> ::= <function_call_arg> DEL_COMMA <function_call_arg_list> | <function_call_arg> ;
<function_call_arg> ::= <expression> ;

// Expression and operator precedence tree
<expression_list> ::= <expression> DEL_COMMA <expression_list> | <expression> ;
<expression> ::= <precedence_tree> ;

<precedence_tree> ::= <precedence_l13> ;

<precedence_l13> ::= <precedence_l13> OP_ATT      <precedence_l12> |                        // = += -+ *= /= %=
                       <precedence_l13> OP_ATT_ADD  <precedence_l12> |
		     <precedence_l13> OP_ATT_SUB  <precedence_l12> |
		     <precedence_l13> OP_ATT_MULT <precedence_l12> |
		     <precedence_l13> OP_ATT_DIV  <precedence_l12> |
		     <precedence_l13> OP_ATT_REM   <precedence_l12> | <precedence_l12> ;
<precedence_l12> ::= <precedence_l12> OP_OR       <precedence_l11> | <precedence_l11> ;	// ||
<precedence_l11> ::= <precedence_l11> OP_AND      <precedence_l10> | <precedence_l10> ;	// &&
<precedence_l10> ::= <precedence_l10> OP_BW_OR    <precedence_l09> | <precedence_l09> ;	// |
<precedence_l09> ::= <precedence_l09> OP_BW_XOR   <precedence_l08> | <precedence_l08> ;	// ^
<precedence_l08> ::= <precedence_l08> OP_BW_AND   <precedence_l07> | <precedence_l07> ;	// &
<precedence_l07> ::= <precedence_l07> OP_EQ       <precedence_l06> |			// == /=
		     <precedence_l07> OP_NEQ      <precedence_l06> | <precedence_l06> ;
<precedence_l06> ::= <precedence_l06> OP_GT       <precedence_l05> |			// > < >= <=
		     <precedence_l06> OP_LT       <precedence_l05> |
		     <precedence_l06> OP_GTE      <precedence_l05> |
		     <precedence_l06> OP_LTE      <precedence_l05> | <precedence_l05> ;
<precedence_l05> ::= <precedence_l05> OP_BW_SR    <precedence_l04> |			// >> <<
		     <precedence_l05> OP_BW_SL    <precedence_l04> | <precedence_l04> ;
<precedence_l04> ::= <precedence_l04> OP_ADD      <precedence_l03> |			// + -
		     <precedence_l04> OP_SUB      <precedence_l03> | <precedence_l03> ;
<precedence_l03> ::= <precedence_l03> OP_MULT     <precedence_l02> |			// * / %
		     <precedence_l03> OP_DIV      <precedence_l02> |
		     <precedence_l03> OP_REM      <precedence_l02> | <precedence_l02> ;
<precedence_l02> ::= <precedence_l02> OP_EXP      <precedence_l01> | <precedence_l01> ;	// **
<precedence_l01> ::= OP_ADD <value> | OP_SUB       <value> |				// unary (+ - ! ~ ++ --) (expr)
		     OP_NOT <value> | OP_BW_COMP   <value> |
                       OP_INC <value> | OP_DEC       <value> | 
		     <value> OP_INC | <value>     OP_DEC   |
		     <value> ;

<value> ::= ID_VAR | <function_call> | <vector_child> | <literal> | DEL_LP <precedence_tree> DEL_RP ;
