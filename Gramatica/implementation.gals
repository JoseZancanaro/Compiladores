#Options
GenerateScanner = true
GenerateParser = true
Language = C++
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = wpl
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = SLR
#RegularDefinitions
// SYMBOLS
SYM_HEX    : [0-9a-fA-F]
SYM_DEC    : [0-9]
SYM_BIN    : [01]
SYM_LETTER : [a-zA-Z]
SYM_CHAR   : [^']
SYM_STR    : [^\"]
SYM_DASH   : \-
SYM_SLASH  : /
SYM_VEC_MT : \[\]

// Identifiers
ID_NAME : [a-zA-Z_][a-zA-Z_0-9]*
ID_FUNC : [a-zA-Z_][a-zA-Z_0-9]*'*
#Tokens
// 1 Keywords

// 1.0 Types
KW_VOID   : "Void"
KW_INT    : "Integer"
KW_FLOAT  : "Float"
KW_DOUBLE : "Double"
KW_BOOL   : "Bool"
KW_CHAR   : "Char"
KW_STR    : "String"
KW_ANY    : "Any"

// 1.1 Conditionals
KW_CASE   : "case"
KW_OF     : "of"

KW_CHOOSE : "choose from"

KW_PIPE       : "|>"
KW_OTHERWISE  : "otherwise"

// 1.2 Loops
KW_FOR       : "for"
KW_WHILE     : "while"
KW_DO        : "do"

// 1.3 Function
KW_DEF    : "def"
KW_RETURN : "return"

// 2 Operators

// 2.0 Attribution
OP_ATT  : "="

// 2.1 Arithmetic
OP_ADD  : "+"
OP_SUB  : "-"
OP_MULT : "*"
OP_DIV  : "/"
OP_EXP  : "**"
OP_REM  : "%"

// 2.2 Relational
OP_GT  : ">"
OP_LT  : "<"
OP_GTE : ">="
OP_LTE : "<="
OP_EQ  : "=="
OP_NEQ : "/="

// 2.3 Logical
OP_AND : "&&"
OP_OR  : "||"
OP_NOT : "!"

// 2.4 Bitwise
OP_BW_SR   : ">>"
OP_BW_SL   : "<<"
OP_BW_AND  : "&"
OP_BW_OR   : "|"
OP_BW_COMP : "~"
OP_BW_XOR  : "^"

// 3 Identifiers
ID_VAR : {ID_NAME}
ID_FUNC: {ID_FUNC}

// 4 Literal values
VAL_INT       : {SYM_DEC}+
VAL_INT_BIN   : 0b{SYM_BIN}+
VAL_INT_HEX   : 0x{SYM_HEX}+
VAL_REAL      : {SYM_DEC}+\.{SYM_DEC}+
VAL_CHAR      : ('{SYM_CHAR}')|('')
VAL_STR       : \"{SYM_STR}*\"
VAL_BOOL_TRUE  = ID_VAR : "true"
VAL_BOOL_FALSE = ID_VAR : "false"
VAL_VEC_EMPTY : {SYM_VEC_MT}

// 5 Comments
COMM_SL : {SYM_DASH}{SYM_DASH}[^\n]*
COMM_ML : {SYM_SLASH}{SYM_DASH}((\-[^/])|[^\-])*{SYM_DASH}+{SYM_SLASH}

// 6 Delimiters
DEL_ARROW  : "->"
DEL_PERIOD : "."
DEL_COMMA  : ","
DEL_COLON  : ":"
DEL_SEMICOLON : ";"

DEL_LP  : "("
DEL_RP  : ")"

DEL_LSB : "["
DEL_RSB : "]"

DEL_LCB : "{"
DEL_RCB : "}"

// Ignore chars
: [\s\t\n\r]*
#NonTerminals
<program>

<scope>

<instruction_list>
<instruction>

<statement>

<initialization>

<declaration>
<declaration_name_list>
<declaration_name>

<type_complete>
<type>
<type_modifier>
<type_modifier_vector>

<literal>
<literal_vector>
<literal_vector_values>

<assignment>

<loop>
<loop_while>
<loop_do_while>
<loop_for>
<loop_for_args>
<loop_for_args_init>
<loop_for_args_test>
<loop_for_args_op>
<loop_range_for>
<loop_range_for_declaration>

<conditional>
<conditional_choose>
<conditional_choose_opt_list>
<conditional_choose_opt>
<conditional_choose_otherwise>

<conditional_case>
<conditional_case_opt_list>
<conditional_case_opt>
<conditional_case_otherwise>

<function>
<function_scope>
<function_name>
<function_type>
<function_arg_list>
<function_arg>
<function_return>

<expression>
#Grammar
<program> ::= <scope> | <function> ;

<scope> ::= DEL_LCB <instruction_list> DEL_RCB ;

<instruction_list> ::= <instruction> <instruction_list> | <instruction> ;
<instruction> ::= <scope> | <loop> | <conditional> | <statement> DEL_SEMICOLON ;

<statement> ::= <initialization> | <function_return>;

<initialization> ::= <declaration> | <assignment> ;

<declaration> ::= <type_complete> <declaration_name_list> ;
<declaration_name_list> ::= <declaration_name> DEL_COMMA <declaration_name_list> | <declaration_name> ;
<declaration_name> ::= ID_VAR OP_ATT <expression> | ID_VAR ;

<type_complete> ::= <type> <type_modifier> ;
<type> ::= KW_INT | KW_FLOAT | KW_DOUBLE | KW_BOOL | KW_CHAR | KW_STR | KW_ANY ;
<type_modifier> ::=  <type_modifier_vector> <type_modifier> | î ;
<type_modifier_vector> ::= VAL_VEC_EMPTY ;

<literal> ::= VAL_INT | VAL_INT_BIN | VAL_INT_HEX | VAL_REAL | VAL_CHAR | VAL_STR | VAL_BOOL_TRUE | VAL_BOOL_FALSE | <literal_vector> ;
<literal_vector> ::= DEL_LSB <literal_vector_values> DEL_RSB | VAL_VEC_EMPTY ; // Filled vector or empty vector
<literal_vector_values> ::= <literal> DEL_COMMA <literal_vector_values> | <literal> ;

<assignment> ::= ID_VAR OP_ATT <expression> ;

// Loops
<loop> ::= <loop_while> | <loop_do_while> | <loop_for> | <loop_range_for> ;

<loop_while> ::= KW_WHILE DEL_LP <expression> DEL_RP <scope> ;

<loop_do_while> ::= KW_DO <scope> KW_WHILE DEL_LP <expression> DEL_RP ;

<loop_for> ::= KW_FOR DEL_LP <loop_for_args> DEL_RP <scope> ;
<loop_for_args> ::= <loop_for_args_init> DEL_SEMICOLON <loop_for_args_test> DEL_SEMICOLON <loop_for_args_op> ;
<loop_for_args_init> ::= <initialization> | î ;
<loop_for_args_test> ::= <expression> | î ;
<loop_for_args_op> ::= <assignment> | î ;

<loop_range_for> ::= KW_FOR DEL_LP <loop_range_for_declaration> DEL_COLON <expression> DEL_RP <scope> ;
<loop_range_for_declaration> ::= <type_complete> ID_VAR | ID_VAR ;

// Conditionals
<conditional> ::= <conditional_choose> | <conditional_case> ;

<conditional_choose> ::= KW_CHOOSE DEL_LCB <conditional_choose_opt_list> DEL_RCB ;
<conditional_choose_opt_list> ::= <conditional_choose_opt> <conditional_choose_opt_list> | <conditional_choose_opt> | <conditional_choose_otherwise> ;
<conditional_choose_opt> ::= KW_PIPE <expression> DEL_ARROW <scope> ;
<conditional_choose_otherwise> ::= KW_PIPE KW_OTHERWISE DEL_ARROW <scope> ;

<conditional_case> ::= KW_CASE ID_VAR KW_OF DEL_LCB <conditional_case_opt_list> DEL_RCB ;
<conditional_case_opt_list> ::= <conditional_case_opt> <conditional_case_opt_list> | <conditional_case_opt> | <conditional_case_otherwise> ;
<conditional_case_opt> ::= KW_PIPE <literal> DEL_ARROW <scope> ;
<conditional_case_otherwise> ::= KW_PIPE KW_OTHERWISE DEL_ARROW <scope> ;

// Sub routines
<function> ::= KW_DEF <function_name> DEL_LP <function_arg_list> DEL_RP DEL_ARROW <function_type> <scope> ;
<function_name> ::= ID_VAR | ID_FUNC;
<function_type> ::= KW_INT | KW_FLOAT | KW_DOUBLE | KW_BOOL | KW_CHAR | KW_STR | KW_ANY | KW_VOID ;
<function_arg_list> ::= <function_arg> DEL_COMMA <function_arg_list> | <function_arg> | î ;
<function_arg> ::=<type_complete> ID_VAR ;
<function_return> ::= KW_RETURN <expression> ;

<expression> ::= <literal> ;
